import mock
from buildslave import idleizer, bot
from twisted.trial import unittest
from twisted.internet import reactor
from twisted.internet import task

class Idleizer(unittest.TestCase):

    def setUp(self):
        self.buildslave_svc = mock.Mock()
        self.idl = idleizer.Idleizer(self.buildslave_svc,
                max_idle_time=100, max_disconnected_time=20)

        self.restart_at = None
        def fakeRestart():
            self.restart_at = reactor.seconds()
        self.patch(self.idl, 'doRestart', fakeRestart)

        self.clock = task.Clock()
        self.patch(reactor, 'callLater', self.clock.callLater)
        self.patch(reactor, 'seconds', self.clock.seconds)

    def test_initially_disconnected(self):
        self.idl.changeState("disconnected")
        self.clock.advance(10)
        # repeating the same state doesn't hurt
        self.idl.changeState("disconnected")
        self.clock.advance(10)
        self.assertEqual(self.restart_at, 20)

    def test_later_disconnected(self):
        self.idl.changeState("connected")
        self.clock.advance(17)
        self.idl.changeState("disconnected")
        self.clock.advance(10)
        self.clock.advance(10)
        self.assertEqual(self.restart_at, 37)

    def test_connected(self):
        self.idl.changeState("connected")
        self.clock.advance(10)
        self.idl.changeState("disconnected")
        self.clock.advance(10)
        # should start timing from here, at 20s
        self.idl.changeState("connected")
        self.clock.advance(10)
        # and a second "connected" should not reset the timer
        self.idl.changeState("connected")
        self.clock.pump(10 for _ in range(15))
        self.assertEqual(self.restart_at, 120)

    def test_activity(self):
        self.idl.changeState("connected")
        self.clock.advance(10)
        # should start timing from here, at 10s
        self.idl.registerActivity()
        self.clock.advance(10)
        # and a second "connected" should not reset the timer
        self.idl.changeState("connected")
        self.clock.pump(10 for _ in range(15))
        self.assertEqual(self.restart_at, 110)

    def test_monkey_gotPerspective(self):
        self.idl.startService()
        self.buildslave_svc.bf.gotPerspective() # mark as connected
        self.clock.pump(10 for _ in range(15))
        self.assertEqual(self.restart_at, 100)
        return self.idl.stopService()

    def test_monkey_startedConnecting(self):
        self.idl.startService()
        self.buildslave_svc.bf.startedConnecting() # mark as disconnected
        self.clock.pump(10 for _ in range(3))
        self.assertEqual(self.restart_at, 20)
        return self.idl.stopService()

    def test_monkey_clientConnectionFailed(self):
        self.idl.startService()
        self.buildslave_svc.bf.clientConnectionFailed() # mark as disconnected
        self.clock.pump(10 for _ in range(3))
        self.assertEqual(self.restart_at, 20)
        return self.idl.stopService()

    def test_monkey_clientConnectionLost(self):
        self.idl.startService()
        self.buildslave_svc.bf.clientConnectionLost() # mark as disconnected
        self.clock.pump(10 for _ in range(3))
        self.assertEqual(self.restart_at, 20)
        return self.idl.stopService()

    def test_monkey_activity(self):
        sb = bot.SlaveBuilder('fred')
        self.idl.startService()
        self.idl.changeState("connected")
        self.clock.advance(10)
        # inject some activity now, at 10s
        sb.activity()
        self.clock.pump(10 for _ in range(11))
        self.assertEqual(self.restart_at, 110)
        return self.idl.stopService()
